{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ritik\\\\OneDrive\\\\Desktop\\\\Highfy\\\\react-chat\\\\src\\\\chat\\\\Chat.js\";\nimport React from 'react';\nimport { ChannelList } from './ChannelList';\nimport './chat.css';\nimport { MessagesPanel } from './MessagesPanel';\nimport socketClient from \"socket.io-client\";\nconst SERVER = \"http://127.0.0.1:8080\";\nexport class Chat extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      channels: null,\n      socket: null,\n      channel: null\n    };\n\n    this.configureSocket = () => {\n      var socket = socketClient(SERVER);\n      socket.on('connection', () => {\n        if (this.state.channel) {\n          this.handleChannelSelect(this.state.channel.id);\n        }\n      });\n      socket.on('channel', channel => {\n        let channels = this.state.channels;\n        channels.forEach(c => {\n          if (c.id === channel.id) {\n            c.participants = channel.participants;\n          }\n        });\n        this.setState({\n          channels\n        });\n      });\n      socket.on('message', message => {\n        let channels = this.state.channels;\n        channels.forEach(c => {\n          if (c.id === message.channel_id) {\n            if (!c.messages) {\n              c.messages = [message];\n            } else {\n              c.messages.push(message);\n            }\n          }\n        });\n        this.setState({\n          channels\n        });\n      });\n      this.socket = socket;\n    };\n\n    this.loadChannels = async () => {\n      fetch('http://localhost:8080/getChannels').then(async response => {\n        let data = await response.json();\n        this.setState({\n          channels: data.channels\n        });\n      });\n    };\n\n    this.handleChannelSelect = id => {\n      let channel = this.state.channels.find(c => {\n        return c.id === id;\n      });\n      this.setState({\n        channel\n      });\n      this.socket.emit('channel-join', id, ack => {});\n    };\n\n    this.handleSendMessage = (channel_id, text) => {\n      this.socket.emit('send-message', {\n        channel_id,\n        text,\n        senderName: this.socket.id,\n        id: Date.now()\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.loadChannels();\n    this.configureSocket();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ChannelList, {\n      channels: this.state.channels,\n      onSelectChannel: this.handleChannelSelect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(MessagesPanel, {\n      onSendMessage: this.handleSendMessage,\n      channel: this.state.channel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"names":["React","ChannelList","MessagesPanel","socketClient","SERVER","Chat","Component","state","channels","socket","channel","configureSocket","on","handleChannelSelect","id","forEach","c","participants","setState","message","channel_id","messages","push","loadChannels","fetch","then","response","data","json","find","emit","ack","handleSendMessage","text","senderName","Date","now","componentDidMount","render"],"sources":["C:/Users/ritik/OneDrive/Desktop/Highfy/react-chat/src/chat/Chat.js"],"sourcesContent":["import React from 'react';\r\nimport { ChannelList } from './ChannelList';\r\nimport './chat.css';\r\nimport { MessagesPanel } from './MessagesPanel';\r\nimport socketClient from \"socket.io-client\";\r\nconst SERVER = \"http://127.0.0.1:8080\";\r\nexport class Chat extends React.Component {\r\n\r\n    state = {\r\n        channels: null,\r\n        socket: null,\r\n        channel: null\r\n    }\r\n    socket;\r\n    componentDidMount() {\r\n        this.loadChannels();\r\n        this.configureSocket();\r\n    }\r\n\r\n    configureSocket = () => {\r\n        var socket = socketClient(SERVER);\r\n        socket.on('connection', () => {\r\n            if (this.state.channel) {\r\n                this.handleChannelSelect(this.state.channel.id);\r\n            }\r\n        });\r\n        socket.on('channel', channel => {\r\n            \r\n            let channels = this.state.channels;\r\n            channels.forEach(c => {\r\n                if (c.id === channel.id) {\r\n                    c.participants = channel.participants;\r\n                }\r\n            });\r\n            this.setState({ channels });\r\n        });\r\n        socket.on('message', message => {\r\n            \r\n            let channels = this.state.channels\r\n            channels.forEach(c => {\r\n                if (c.id === message.channel_id) {\r\n                    if (!c.messages) {\r\n                        c.messages = [message];\r\n                    } else {\r\n                        c.messages.push(message);\r\n                    }\r\n                }\r\n            });\r\n            this.setState({ channels });\r\n        });\r\n        this.socket = socket;\r\n    }\r\n\r\n    loadChannels = async () => {\r\n        fetch('http://localhost:8080/getChannels').then(async response => {\r\n            let data = await response.json();\r\n            this.setState({ channels: data.channels });\r\n        })\r\n    }\r\n\r\n    handleChannelSelect = id => {\r\n        let channel = this.state.channels.find(c => {\r\n            return c.id === id;\r\n        });\r\n        this.setState({ channel });\r\n        this.socket.emit('channel-join', id, ack => {\r\n        });\r\n    }\r\n\r\n    handleSendMessage = (channel_id, text) => {\r\n        this.socket.emit('send-message', { channel_id, text, senderName: this.socket.id, id: Date.now() });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='chat-app'>\r\n                <ChannelList channels={this.state.channels} onSelectChannel={this.handleChannelSelect} />\r\n                <MessagesPanel onSendMessage={this.handleSendMessage} channel={this.state.channel} />\r\n            </div>\r\n        );\r\n    }\r\n}"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAO,YAAP;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,MAAMC,MAAM,GAAG,uBAAf;AACA,OAAO,MAAMC,IAAN,SAAmBL,KAAK,CAACM,SAAzB,CAAmC;EAAA;IAAA;IAAA,KAEtCC,KAFsC,GAE9B;MACJC,QAAQ,EAAE,IADN;MAEJC,MAAM,EAAE,IAFJ;MAGJC,OAAO,EAAE;IAHL,CAF8B;;IAAA,KAatCC,eAbsC,GAapB,MAAM;MACpB,IAAIF,MAAM,GAAGN,YAAY,CAACC,MAAD,CAAzB;MACAK,MAAM,CAACG,EAAP,CAAU,YAAV,EAAwB,MAAM;QAC1B,IAAI,KAAKL,KAAL,CAAWG,OAAf,EAAwB;UACpB,KAAKG,mBAAL,CAAyB,KAAKN,KAAL,CAAWG,OAAX,CAAmBI,EAA5C;QACH;MACJ,CAJD;MAKAL,MAAM,CAACG,EAAP,CAAU,SAAV,EAAqBF,OAAO,IAAI;QAE5B,IAAIF,QAAQ,GAAG,KAAKD,KAAL,CAAWC,QAA1B;QACAA,QAAQ,CAACO,OAAT,CAAiBC,CAAC,IAAI;UAClB,IAAIA,CAAC,CAACF,EAAF,KAASJ,OAAO,CAACI,EAArB,EAAyB;YACrBE,CAAC,CAACC,YAAF,GAAiBP,OAAO,CAACO,YAAzB;UACH;QACJ,CAJD;QAKA,KAAKC,QAAL,CAAc;UAAEV;QAAF,CAAd;MACH,CATD;MAUAC,MAAM,CAACG,EAAP,CAAU,SAAV,EAAqBO,OAAO,IAAI;QAE5B,IAAIX,QAAQ,GAAG,KAAKD,KAAL,CAAWC,QAA1B;QACAA,QAAQ,CAACO,OAAT,CAAiBC,CAAC,IAAI;UAClB,IAAIA,CAAC,CAACF,EAAF,KAASK,OAAO,CAACC,UAArB,EAAiC;YAC7B,IAAI,CAACJ,CAAC,CAACK,QAAP,EAAiB;cACbL,CAAC,CAACK,QAAF,GAAa,CAACF,OAAD,CAAb;YACH,CAFD,MAEO;cACHH,CAAC,CAACK,QAAF,CAAWC,IAAX,CAAgBH,OAAhB;YACH;UACJ;QACJ,CARD;QASA,KAAKD,QAAL,CAAc;UAAEV;QAAF,CAAd;MACH,CAbD;MAcA,KAAKC,MAAL,GAAcA,MAAd;IACH,CA7CqC;;IAAA,KA+CtCc,YA/CsC,GA+CvB,YAAY;MACvBC,KAAK,CAAC,mCAAD,CAAL,CAA2CC,IAA3C,CAAgD,MAAMC,QAAN,IAAkB;QAC9D,IAAIC,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAjB;QACA,KAAKV,QAAL,CAAc;UAAEV,QAAQ,EAAEmB,IAAI,CAACnB;QAAjB,CAAd;MACH,CAHD;IAIH,CApDqC;;IAAA,KAsDtCK,mBAtDsC,GAsDhBC,EAAE,IAAI;MACxB,IAAIJ,OAAO,GAAG,KAAKH,KAAL,CAAWC,QAAX,CAAoBqB,IAApB,CAAyBb,CAAC,IAAI;QACxC,OAAOA,CAAC,CAACF,EAAF,KAASA,EAAhB;MACH,CAFa,CAAd;MAGA,KAAKI,QAAL,CAAc;QAAER;MAAF,CAAd;MACA,KAAKD,MAAL,CAAYqB,IAAZ,CAAiB,cAAjB,EAAiChB,EAAjC,EAAqCiB,GAAG,IAAI,CAC3C,CADD;IAEH,CA7DqC;;IAAA,KA+DtCC,iBA/DsC,GA+DlB,CAACZ,UAAD,EAAaa,IAAb,KAAsB;MACtC,KAAKxB,MAAL,CAAYqB,IAAZ,CAAiB,cAAjB,EAAiC;QAAEV,UAAF;QAAca,IAAd;QAAoBC,UAAU,EAAE,KAAKzB,MAAL,CAAYK,EAA5C;QAAgDA,EAAE,EAAEqB,IAAI,CAACC,GAAL;MAApD,CAAjC;IACH,CAjEqC;EAAA;;EAQtCC,iBAAiB,GAAG;IAChB,KAAKd,YAAL;IACA,KAAKZ,eAAL;EACH;;EAwDD2B,MAAM,GAAG;IAEL,oBACI;MAAK,SAAS,EAAC,UAAf;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACI,oBAAC,WAAD;MAAa,QAAQ,EAAE,KAAK/B,KAAL,CAAWC,QAAlC;MAA4C,eAAe,EAAE,KAAKK,mBAAlE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADJ,eAEI,oBAAC,aAAD;MAAe,aAAa,EAAE,KAAKmB,iBAAnC;MAAsD,OAAO,EAAE,KAAKzB,KAAL,CAAWG,OAA1E;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAFJ,CADJ;EAMH;;AA3EqC"},"metadata":{},"sourceType":"module"}