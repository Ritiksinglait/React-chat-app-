{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ritik\\\\OneDrive\\\\Desktop\\\\Highfy\\\\react-chat\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Chat } from './chat/Chat'; // import {injected} from \"./Components/wallet/connector\";\n// import { useWeb3React } from '@web3-react/core';\n// const { active, account, activate } = useWeb3React()\n// async function connect() {\n//   try {\n//     await activate(injected)\n//   } catch (error) {\n//     console.log(error)\n//   }\n// }\n\nasync function connect() {\n  document.getElementById('connect-button').addEventListener('click', event => {\n    let account;\n    let button = event.target;\n    window.ethereum.request({\n      method: 'eth_requestAccounts'\n    }).then(accounts => {\n      account = accounts[0];\n      console.log(account);\n      button.textContent = account;\n      window.ethereum.request({\n        method: 'eth_getBalance',\n        params: [account, 'latest']\n      }).then(result => {\n        console.log(result);\n        let wei = parseInt(result, 16);\n        let balance = wei / 10 ** 18;\n        console.log(balance + \" ETH\");\n      });\n    });\n  });\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Chat, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }\n})), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"names":["React","ReactDOM","App","serviceWorker","Chat","connect","document","getElementById","addEventListener","event","account","button","target","window","ethereum","request","method","then","accounts","console","log","textContent","params","result","wei","parseInt","balance","render","unregister"],"sources":["C:/Users/ritik/OneDrive/Desktop/Highfy/react-chat/src/index.js"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport  {Chat} from './chat/Chat';\r\n// import {injected} from \"./Components/wallet/connector\";\r\n// import { useWeb3React } from '@web3-react/core';\r\n\r\n// const { active, account, activate } = useWeb3React()\r\n\r\n\r\n// async function connect() {\r\n//   try {\r\n//     await activate(injected)\r\n//   } catch (error) {\r\n//     console.log(error)\r\n//   }\r\n// }\r\nasync function connect(){\r\n  \r\n  document.getElementById('connect-button').addEventListener('click', event => {\r\n    let account;\r\n    let button = event.target;\r\n    window.ethereum.request({method: 'eth_requestAccounts'}).then(accounts => {\r\n      account = accounts[0];\r\n      console.log(account);\r\n      button.textContent = account;\r\n\r\n      window.ethereum.request({method: 'eth_getBalance' , params: [account, 'latest']}).then(result => {\r\n        console.log(result);\r\n        let wei = parseInt(result,16);\r\n        let balance = wei / (10**18);\r\n        console.log(balance + \" ETH\");\r\n      });\r\n    });\r\n  });\r\n\r\n}\r\n\r\n\r\nReactDOM.render(\r\n\r\n  <React.StrictMode>\r\n    \r\n    <Chat />\r\n    {/* <button onClick={connect} id=\"connect-button\"> Connect to metamask</button> */}\r\n    {/* {active ? <span>Connected with <b>{account}</b></span> : <span>Not connected</span>} */}\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAASC,IAAT,QAAoB,aAApB,C,CACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeC,OAAf,GAAwB;EAEtBC,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0CC,gBAA1C,CAA2D,OAA3D,EAAoEC,KAAK,IAAI;IAC3E,IAAIC,OAAJ;IACA,IAAIC,MAAM,GAAGF,KAAK,CAACG,MAAnB;IACAC,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;MAACC,MAAM,EAAE;IAAT,CAAxB,EAAyDC,IAAzD,CAA8DC,QAAQ,IAAI;MACxER,OAAO,GAAGQ,QAAQ,CAAC,CAAD,CAAlB;MACAC,OAAO,CAACC,GAAR,CAAYV,OAAZ;MACAC,MAAM,CAACU,WAAP,GAAqBX,OAArB;MAEAG,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;QAACC,MAAM,EAAE,gBAAT;QAA4BM,MAAM,EAAE,CAACZ,OAAD,EAAU,QAAV;MAApC,CAAxB,EAAkFO,IAAlF,CAAuFM,MAAM,IAAI;QAC/FJ,OAAO,CAACC,GAAR,CAAYG,MAAZ;QACA,IAAIC,GAAG,GAAGC,QAAQ,CAACF,MAAD,EAAQ,EAAR,CAAlB;QACA,IAAIG,OAAO,GAAGF,GAAG,GAAI,MAAI,EAAzB;QACAL,OAAO,CAACC,GAAR,CAAYM,OAAO,GAAG,MAAtB;MACD,CALD;IAMD,CAXD;EAYD,CAfD;AAiBD;;AAGDzB,QAAQ,CAAC0B,MAAT,eAEE,oBAAC,KAAD,CAAO,UAAP;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA,gBAEE,oBAAC,IAAD;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA,EAFF,CAFF,EAQErB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CARF,E,CAWA;AACA;AACA;;AACAJ,aAAa,CAACyB,UAAd"},"metadata":{},"sourceType":"module"}