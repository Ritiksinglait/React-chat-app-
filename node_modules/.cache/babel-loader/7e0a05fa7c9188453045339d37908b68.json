{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ritik\\\\OneDrive\\\\Desktop\\\\Highfy\\\\react-chat\\\\src\\\\chat\\\\Chat.js\";\nimport React from 'react';\nimport ChannelList from './ChannelList';\nimport './chat.css';\nimport MessagesPanel from './MessagesPanel';\nimport socketClient from \"socket.io-client\";\nconst SERVER = \"http://127.0.0.1:8080\";\n\nconst Chat = props => {\n  state = {\n    channels: null,\n    socket: null,\n    channel: null\n  };\n  socket; // componentDidMount() {\n  //     loadChannels();\n  //     configureSocket();\n  // }\n\n  configureSocket = () => {\n    var socket = socketClient(SERVER);\n    socket.on('connection', () => {\n      if (state.channel) {\n        handleChannelSelect(state.channel.id);\n      }\n    });\n    socket.on('channel', channel => {\n      let channels = state.channels;\n      channels.forEach(c => {\n        if (c.id === channel.id) {\n          c.participants = channel.participants;\n        }\n      });\n      setState({\n        channels\n      });\n    });\n    socket.on('message', message => {\n      let channels = state.channels;\n      channels.forEach(c => {\n        if (c.id === message.channel_id) {\n          if (!c.messages) {\n            c.messages = [message];\n          } else {\n            c.messages.push(message);\n          }\n        }\n      });\n      setState({\n        channels\n      });\n    });\n    socket = socket;\n  };\n\n  loadChannels = async () => {\n    fetch('http://localhost:8080/getChannels').then(async response => {\n      let data = await response.json();\n      setState({\n        channels: data.channels\n      });\n    });\n  };\n\n  handleChannelSelect = id => {\n    let channel = state.channels.find(c => {\n      return c.id === id;\n    });\n    setState({\n      channel\n    });\n    socket.emit('channel-join', id, ack => {});\n  };\n\n  handleSendMessage = (channel_id, text) => {\n    socket.emit('send-message', {\n      channel_id,\n      text,\n      senderName: socket.id,\n      id: Date.now()\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ChannelList, {\n    channels: state.channels,\n    onSelectChannel: handleChannelSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(MessagesPanel, {\n    onSendMessage: handleSendMessage,\n    channel: state.channel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }));\n};","map":{"version":3,"names":["React","ChannelList","MessagesPanel","socketClient","SERVER","Chat","props","state","channels","socket","channel","configureSocket","on","handleChannelSelect","id","forEach","c","participants","setState","message","channel_id","messages","push","loadChannels","fetch","then","response","data","json","find","emit","ack","handleSendMessage","text","senderName","Date","now"],"sources":["C:/Users/ritik/OneDrive/Desktop/Highfy/react-chat/src/chat/Chat.js"],"sourcesContent":["import React from 'react';\r\nimport  ChannelList  from './ChannelList';\r\nimport './chat.css';\r\nimport  MessagesPanel  from './MessagesPanel';\r\nimport socketClient from \"socket.io-client\";\r\nconst SERVER = \"http://127.0.0.1:8080\";\r\nconst Chat =(props)=> {\r\n\r\n    state = {\r\n        channels: null,\r\n        socket: null,\r\n        channel: null\r\n    }\r\n    socket;\r\n    // componentDidMount() {\r\n    //     loadChannels();\r\n    //     configureSocket();\r\n    // }\r\n\r\n    configureSocket = () => {\r\n        var socket = socketClient(SERVER);\r\n        socket.on('connection', () => {\r\n            if (state.channel) {\r\n                handleChannelSelect(state.channel.id);\r\n            }\r\n        });\r\n        socket.on('channel', channel => {\r\n            \r\n            let channels =state.channels;\r\n            channels.forEach(c => {\r\n                if (c.id === channel.id) {\r\n                    c.participants = channel.participants;\r\n                }\r\n            });\r\n            setState({ channels });\r\n        });\r\n        socket.on('message', message => {\r\n            \r\n            let channels = state.channels\r\n            channels.forEach(c => {\r\n                if (c.id === message.channel_id) {\r\n                    if (!c.messages) {\r\n                        c.messages = [message];\r\n                    } else {\r\n                        c.messages.push(message);\r\n                    }\r\n                }\r\n            });\r\n            setState({ channels });\r\n        });\r\n        socket = socket;\r\n    }\r\n\r\n    loadChannels = async () => {\r\n        fetch('http://localhost:8080/getChannels').then(async response => {\r\n            let data = await response.json();\r\n            setState({ channels: data.channels });\r\n        })\r\n    }\r\n\r\n    handleChannelSelect = id => {\r\n        let channel = state.channels.find(c => {\r\n            return c.id === id;\r\n        });\r\n        setState({ channel });\r\n        socket.emit('channel-join', id, ack => {\r\n        });\r\n    }\r\n\r\n    handleSendMessage = (channel_id, text) => {\r\n        socket.emit('send-message', { channel_id, text, senderName: socket.id, id: Date.now() });\r\n    }\r\n\r\n    \r\n\r\n        return (\r\n            <div className='chat-app'>\r\n                <ChannelList channels={state.channels} onSelectChannel={handleChannelSelect} />\r\n                <MessagesPanel onSendMessage={handleSendMessage} channel={state.channel} />\r\n            </div>\r\n        );\r\n    \r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}